package hw2;

import api.BallType;
import api.PlayerPosition;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import javax.swing.SwingUtilities;
import org.junit.Assert;
import org.junit.Test;
import speccheck.SpecCheck;
import speccheck.SpecCheckTest;

public class SpecChecker {
  public static void main(String[] args) {
    boolean testOnly = (args.length > 0);
    if (testOnly) {
      String result = SpecCheck.grade(SpecChecker.class);
      System.out.println(result);
    } else {
      SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              SpecCheck.testAndZip(SpecChecker.class, "SUBMIT_THIS_hw2", "hw2", new String[] { "src/hw2/ThreeCushion.java" });
            }
          });
    } 
  }
  
  public void initializationError() {
    System.out.println("foo");
  }
  
  @Test
  @SpecCheckTest(msg = "1. For new ThreeCushion, inning should be 1 ", nPoints = 1)
  public void test1() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    Assert.assertEquals(1L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "2. Player A wins lag and chooses break shot for self, inning player should be A ", nPoints = 1)
  public void test2() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(PlayerPosition.PLAYER_A, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "3. Player A wins lag and chooses break shot for other, inning player should be B ", nPoints = 1)
  public void test3() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(false, BallType.WHITE);
    Assert.assertEquals(PlayerPosition.PLAYER_B, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "4. Player B wins lag and chooses break shot for self, inning player should be B ", nPoints = 1)
  public void test4() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(PlayerPosition.PLAYER_B, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "5. Player A wins lag and chooses break shot and white, current cue ball should be white ", nPoints = 1)
  public void test5() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(BallType.WHITE, game.getCueBall());
  }
  
  @Test
  @SpecCheckTest(msg = "6. Player A wins lag and chooses B to break and white cue for self, current cue ball should be yellow ", nPoints = 1)
  public void test6() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(false, BallType.WHITE);
    Assert.assertEquals(BallType.YELLOW, game.getCueBall());
  }
  
  @Test
  @SpecCheckTest(msg = "7. Lag winner makes selections, isBreakShot() should return true ", nPoints = 1)
  public void test7() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isBreakShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "8. Before first shot, isInningStarted() should return false ", nPoints = 1)
  public void test8() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isInningStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "9. Before first shot, isShotStarted() should return false ", nPoints = 1)
  public void test9() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isShotStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "10. Start of first shot, isBreakShot() should return true ", nPoints = 1)
  public void test10() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isBreakShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "11. Start of first shot, isInningStrated() should return true ", nPoints = 1)
  public void test11() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isInningStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "12. Start of first shot, isGameOver() should return false ", nPoints = 1)
  public void test12() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isGameOver()));
  }
  
  @Test
  @SpecCheckTest(msg = "13. Start of first shot, isShotStarted() should return true ", nPoints = 1)
  public void test13() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isShotStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "14. Start of first shot, player A score should be 0 ", nPoints = 1)
  public void test14() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(0L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "15. Start of first shot, player B score should be 0 ", nPoints = 1)
  public void test15() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(0L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "16. On break shot: Player A cue stick to choosen white cue ball, strike red, impact cushion 3 times, strike yellow, end shot; Player A should have 1 point ", nPoints = 1)
  public void test16() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "17. On break shot: Player A cue stick to choosen white cue ball, strike red, impact cushion 3 times, strike yellow, end shot; Player B should have 0 points ", nPoints = 1)
  public void test17() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(0L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "18. On break shot: Player B cue stick to choosen white cue ball, strike red, impact cushion 3 times, strike yellow, end shot; Player B should have 1 point ", nPoints = 1)
  public void test18() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "19. On break shot: Player B cue stick to choosen white cue ball, strike red, impact cushion 3 times, strike yellow, end shot; Player A should have 0 points ", nPoints = 1)
  public void test19() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(0L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "20. On break shot: Player A cue stick to choosen yellow cue ball, strike red, impact cushion 3 times, strike white, end shot; Player A should have 1 point ", nPoints = 1)
  public void test20() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "21. On break shot: Player A cue stick to choosen yellow cue ball, strike red, impact cushion 3 times, strike white, end shot; Player B should have 0 points ", nPoints = 1)
  public void test21() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(0L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "22. On break shot: Player B cue stick to choosen yellow cue ball, strike red, impact cushion 3 times, strike white, end shot; Player B should have 1 point ", nPoints = 1)
  public void test22() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "23. On break shot: Player B cue stick to choosen yellow cue ball, strike red, impact cushion 3 times, strike white, end shot; Player A should have 0 points ", nPoints = 1)
  public void test23() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(0L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "24. On break shot: Player A cue stick to NOT choosen ball yellow, strike red, impact cushion 3 times, strike white, end shot; Player A should have 0 points ", nPoints = 1)
  public void test24() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(0L, game.getPlayerAScore());
  }
  
  @Test
  @SpecCheckTest(msg = "25. On break shot: Player A cue stick to NOT choosen ball yellow, strike red, impact cushion 3 times, strike white, end shot; getInning() should return 2 ", nPoints = 1)
  public void test25() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "26. On break shot: Player A cue stick to choosen ball yellow, strike white, impact cushion 3 times, strike red, end shot; getInning() should return 2 ", nPoints = 1)
  public void test26() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "27. On break shot: Player A cue stick to choosen ball yellow, strike white; getInning() should return 2 ", nPoints = 1)
  public void test27() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.WHITE);
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "28. On break shot: Player A cue stick to choosen ball white; getCueBall() should return WHITE ", nPoints = 1)
  public void test28() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(BallType.WHITE, game.getCueBall());
  }
  
  @Test
  @SpecCheckTest(msg = "29. On break shot: Player A cue stick to choosen ball yellow, strike white (this is a foul, Rule 3a); getCueBall() should return WHITE ", nPoints = 1)
  public void test29() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.WHITE);
    Assert.assertEquals(BallType.WHITE, game.getCueBall());
  }
  
  @Test
  @SpecCheckTest(msg = "30. On break shot: Player A cue stick to choosen ball WHITE, impact cushion, strike red (note RULE 3a, must strike red directly, not by cushion); getCueBall() should return YELLOW ", nPoints = 1)
  public void test30() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    Assert.assertEquals(BallType.YELLOW, game.getCueBall());
  }
  
  @Test
  @SpecCheckTest(msg = "31. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, strike white, impact cushion 3 times, strike red, end shot; Player B score should be 2 ", nPoints = 1)
  public void test31() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "32. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, impact cushion 3 times, strike white, strike red, end shot; Player B score should be 2 ", nPoints = 1)
  public void test32() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "33. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, impact cushion, strike white, impact cushion 2 times, strike red, end shot; Player B score should be 2 ", nPoints = 1)
  public void test33() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "34. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, impact cushion, strike white, impact cushion, strike white, impact cushion, strike red, end shot; Player B score should be 2 ", nPoints = 1)
  public void test34() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "35. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, impact cushion 3 times, strike red, strike white, end shot; Player B score should be 2 ", nPoints = 1)
  public void test35() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "36. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, impact cushion 2 times, strike red, strike white, impact cushion, end shot; Player B score should be 1 ", nPoints = 1)
  public void test36() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "37. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, end shot; Player B score should be 1 ", nPoints = 1)
  public void test37() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "38. On normal shot with Player B starting score 1: Player B cue stick to yellow cue ball, call foul(), impact cushion 3 times, strike white, strike red, end shot; Player B score should be 1 ", nPoints = 1)
  public void test38() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.foul();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(1L, game.getPlayerBScore());
  }
  
  @Test
  @SpecCheckTest(msg = "39. On normal shot with Player B starting inning 1: Player B cue stick to yellow cue ball, call foul(), impact cushion 3 times, strike white, strike red, end shot; inning should be 2 ", nPoints = 1)
  public void test39() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.foul();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "40. After call to foul(), isInningStarted() should return false ", nPoints = 1)
  public void test40() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.foul();
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isInningStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "41. After call to endShot(), isShotStarted() should return false ", nPoints = 1)
  public void test41() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isShotStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "42. Starting at inning 1: call to foul(), call to endShot(): getInning() should return 2 ", nPoints = 1)
  public void test42() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.foul();
    game.endShot();
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "43. On normal shot: Player B cue stick to yellow cue ball, impact cushion 3 times, strike white, strike red, end shot; isBankShot() should return true ", nPoints = 1)
  public void test43() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.YELLOW);
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.endShot();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isBankShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "44. On normal shot: Player B cue stick to white cue ball, impact cushion 3 times, strike red, strike yellow, end shot; isBankShot() should return true ", nPoints = 1)
  public void test44() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isBankShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "45. On normal shot: Player B cue stick to white cue ball, impact cushion 3 times, strike red, strike red, end shot; isBankShot() should return false ", nPoints = 1)
  public void test45() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isBankShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "46. On normal shot: Player B cue stick to white cue ball, strike yellow, impact cushion 3 times, strike red, end shot; isBankShot() should return false ", nPoints = 1)
  public void test46() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isBankShot()));
  }
  
  @Test
  @SpecCheckTest(msg = "47. On normal shot: Player B cue stick to white cue ball, call foul(); getInningPlayer should return Player A ", nPoints = 1)
  public void test47() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.foul();
    Assert.assertEquals(PlayerPosition.PLAYER_A, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "48. On normal shot: Player B cue stick to white cue ball, call endShot(); getInningPlayer should return Player A ", nPoints = 1)
  public void test48() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.endShot();
    Assert.assertEquals(PlayerPosition.PLAYER_A, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "49. On normal shot: Player B cue stick to white cue ball, impact cusion 3 times, strike yellow, strike red, call endShot(); getInningPlayer should return Player B ", nPoints = 1)
  public void test49() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(PlayerPosition.PLAYER_B, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "50. On normal shot isGameOver() should return false ", nPoints = 1)
  public void test50() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_B, 40);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isGameOver()));
  }
  
  @Test
  @SpecCheckTest(msg = "51. Game points to win set to 2, player A makes two shots, isGameOver() should return true ", nPoints = 1)
  public void test51() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(game.isGameOver()));
  }
  
  @Test
  @SpecCheckTest(msg = "52. Player A with white cue ball: cue stick strikes white, call foul(), cue stick strikes yellow, impact cushions 3 times, strike white, strike red, end shot; getInningPlayer() should return Player A ", nPoints = 1)
  public void test52() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.foul();
    game.cueStickStrike(BallType.YELLOW);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.endShot();
    Assert.assertEquals(PlayerPosition.PLAYER_A, game.getInningPlayer());
  }
  
  @Test
  @SpecCheckTest(msg = "53. Game is over: cue stick strick cue ball; shot started should be false ", nPoints = 1)
  public void test53() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isShotStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "54. Game is over: cue stick strick cue ball; inning started should be false ", nPoints = 1)
  public void test54() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    Assert.assertEquals(Boolean.valueOf(false), Boolean.valueOf(game.isInningStarted()));
  }
  
  @Test
  @SpecCheckTest(msg = "55. Game is over with inning count 1: call foul(); getInning() should return 1 ", nPoints = 1)
  public void test55() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.cueStickStrike(BallType.WHITE);
    game.cueBallStrike(BallType.RED);
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallImpactCushion();
    game.cueBallStrike(BallType.YELLOW);
    game.endShot();
    game.foul();
    Assert.assertEquals(1L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "56. Inning is 1: call foul(); getInning() should return 2 ", nPoints = 1)
  public void test56() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.lagWinnerChooses(true, BallType.WHITE);
    game.foul();
    Assert.assertEquals(2L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "57. Before lag winner makes selections: call foul(); getInning() should return 1 ", nPoints = 1)
  public void test57() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.foul();
    Assert.assertEquals(1L, game.getInning());
  }
  
  @Test
  @SpecCheckTest(msg = "58. Before lag winner makes selections: call endShot(); getInning() should return 1 ", nPoints = 1)
  public void test58() {
    ThreeCushion game = new ThreeCushion(PlayerPosition.PLAYER_A, 2);
    game.endShot();
    Assert.assertEquals(1L, game.getInning());
  }
  
  public static String getModifierDiff(int expected, int actual) {
    String msg = "";
    if (Modifier.isStatic(expected) != Modifier.isStatic(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isStatic(actual) ? "not " : "") + "be static. "; 
    if (Modifier.isPublic(expected) != Modifier.isPublic(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isPublic(actual) ? "not " : "") + "be public. "; 
    if (Modifier.isProtected(expected) != Modifier.isProtected(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isProtected(actual) ? "not " : "") + "be protected. "; 
    if (Modifier.isPrivate(expected) != Modifier.isPrivate(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isPrivate(actual) ? "not " : "") + "be private. "; 
    if (Modifier.isFinal(expected) != Modifier.isFinal(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isFinal(actual) ? "not " : "") + "be final. "; 
    if (Modifier.isInterface(expected) != Modifier.isInterface(actual))
      msg = String.valueOf(msg) + "It should " + (Modifier.isInterface(actual) ? "not " : "") + "be interface. "; 
    return msg;
  }
  
  private static String getTypesList(Class[] types) {
    String list = "";
    if (types.length > 0) {
      list = String.valueOf(list) + types[0].getCanonicalName() + ".class";
      for (int i = 1; i < types.length; i++)
        list = String.valueOf(list) + ", " + types[i].getCanonicalName() + ".class"; 
    } 
    return list;
  }
  
  @SpecCheckTest(order = 0, msg = "MISSING CLASS")
  @Test
  public void testForClasses() throws Exception {
    try {
      Class.forName("hw2.ThreeCushion");
    } catch (ClassNotFoundException e) {
      Assert.fail("A class by the name of hw2.ThreeCushion could not be found. Check case, spelling, and that you created your class in the right package.");
    } 
  }
  
  @SpecCheckTest(order = 10, msg = "Class does not conform to specification")
  @Test
  public void testHw2ThreeCushion() throws Exception {
    try {
      Class<?> cls = Class.forName("hw2.ThreeCushion");
      Assert.assertTrue("The modifiers for class hw2.ThreeCushion are not correct. " + getModifierDiff(1, cls.getModifiers()), (1 == cls.getModifiers()));
    } catch (ClassNotFoundException e) {
      Assert.fail("A class by the name of hw2.ThreeCushion could not be found. Check case, spelling, and that you created your class in the right package.");
    } 
    Field field = null;
    LinkedList<Field> fields = new LinkedList<>();
    byte b1;
    int i;
    Field[] arrayOfField;
    for (i = (arrayOfField = Class.forName("hw2.ThreeCushion").getDeclaredFields()).length, b1 = 0; b1 < i; ) {
      Field actual = arrayOfField[b1];
      fields.add(actual);
      b1++;
    } 
    for (Field actual : fields) {
      if (Modifier.isStatic(actual.getModifiers())) {
        Assert.assertTrue(String.format("Field hw2.ThreeCushion.%1$s is not in the specification. Any static fields you add should be private.", new Object[] { actual.getName() }), !(!Modifier.isPrivate(actual.getModifiers()) && !Modifier.isProtected(actual.getModifiers())));
        continue;
      } 
      Assert.assertTrue("Instance variables must be private. hw2.ThreeCushion." + actual.getName() + " is not. ", Modifier.isPrivate(actual.getModifiers()));
    } 
    List<Class<?>> exceptions = null;
    List<Class<?>> outlawedExceptions = null;
    Constructor<?> ctor = null;
    try {
      ctor = Class.forName("hw2.ThreeCushion").getDeclaredConstructor(new Class[] { PlayerPosition.class, int.class });
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a constructor in class hw2.ThreeCushion taking 2 arguments, having types api.PlayerPosition, int.");
    } 
    Assert.assertTrue("The modifiers for constructor hw2.ThreeCushion(api.PlayerPosition, int) are not correct. " + getModifierDiff(1, ctor.getModifiers()), (1 == ctor.getModifiers()));
    exceptions = Arrays.asList(ctor.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires constructor hw2.ThreeCushion(api.PlayerPosition, int) to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    LinkedList<Constructor<?>> ctors = new LinkedList<>();
    byte b2;
    int j;
    Constructor[] arrayOfConstructor;
    for (j = (arrayOfConstructor = (Constructor[])Class.forName("hw2.ThreeCushion").getDeclaredConstructors()).length, b2 = 0; b2 < j; ) {
      Constructor<?> actual = arrayOfConstructor[b2];
      ctors.add(actual);
      b2++;
    } 
    try {
      ctor = Class.forName("hw2.ThreeCushion").getDeclaredConstructor(new Class[] { PlayerPosition.class, int.class });
      ctors.remove(ctor);
    } catch (NoSuchMethodException noSuchMethodException) {}
    for (Constructor<?> actual : ctors) {
      if (Modifier.isPublic(actual.getModifiers()) && (actual.getParameterTypes()).length != 0)
        Assert.fail(String.format("Constructor %1$s(%2$s) is not in the specification. Any constructors you add should be private (or possibly protected).", new Object[] { actual.getName(), getTypesList(actual.getParameterTypes()).replaceAll(".class", "") })); 
    } 
    Method method = null;
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("toString", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a toString method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method toString() in class hw2.ThreeCushion has the wrong return type.", String.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method toString() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method toString() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isBreakShot", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a isBreakShot method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method isBreakShot() in class hw2.ThreeCushion has the wrong return type.", boolean.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method isBreakShot() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method isBreakShot() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isShotStarted", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a isShotStarted method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method isShotStarted() in class hw2.ThreeCushion has the wrong return type.", boolean.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method isShotStarted() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method isShotStarted() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isInningStarted", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a isInningStarted method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method isInningStarted() in class hw2.ThreeCushion has the wrong return type.", boolean.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method isInningStarted() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method isInningStarted() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueBallStrike", new Class[] { BallType.class });
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a cueBallStrike method in class hw2.ThreeCushion taking 1 argument, having type api.BallType.");
    } 
    Assert.assertEquals("Your method cueBallStrike(api.BallType) in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method cueBallStrike(api.BallType) in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method cueBallStrike(api.BallType) in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("lagWinnerChooses", new Class[] { boolean.class, BallType.class });
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a lagWinnerChooses method in class hw2.ThreeCushion taking 2 arguments, having types boolean, api.BallType.");
    } 
    Assert.assertEquals("Your method lagWinnerChooses(boolean, api.BallType) in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method lagWinnerChooses(boolean, api.BallType) in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method lagWinnerChooses(boolean, api.BallType) in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueStickStrike", new Class[] { BallType.class });
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a cueStickStrike method in class hw2.ThreeCushion taking 1 argument, having type api.BallType.");
    } 
    Assert.assertEquals("Your method cueStickStrike(api.BallType) in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method cueStickStrike(api.BallType) in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method cueStickStrike(api.BallType) in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueBallImpactCushion", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a cueBallImpactCushion method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method cueBallImpactCushion() in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method cueBallImpactCushion() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method cueBallImpactCushion() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getPlayerAScore", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a getPlayerAScore method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method getPlayerAScore() in class hw2.ThreeCushion has the wrong return type.", int.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method getPlayerAScore() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method getPlayerAScore() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getPlayerBScore", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a getPlayerBScore method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method getPlayerBScore() in class hw2.ThreeCushion has the wrong return type.", int.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method getPlayerBScore() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method getPlayerBScore() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getInningPlayer", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a getInningPlayer method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method getInningPlayer() in class hw2.ThreeCushion has the wrong return type.", PlayerPosition.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method getInningPlayer() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method getInningPlayer() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("foul", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a foul method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method foul() in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method foul() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method foul() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("endShot", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a endShot method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method endShot() in class hw2.ThreeCushion has the wrong return type.", void.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method endShot() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method endShot() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getInning", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a getInning method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method getInning() in class hw2.ThreeCushion has the wrong return type.", int.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method getInning() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method getInning() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getCueBall", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a getCueBall method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method getCueBall() in class hw2.ThreeCushion has the wrong return type.", BallType.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method getCueBall() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method getCueBall() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isBankShot", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a isBankShot method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method isBankShot() in class hw2.ThreeCushion has the wrong return type.", boolean.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method isBankShot() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method isBankShot() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isGameOver", new Class[0]);
    } catch (NoSuchMethodException e) {
      Assert.fail("You need a isGameOver method in class hw2.ThreeCushion taking 0 arguments.");
    } 
    Assert.assertEquals("Your method isGameOver() in class hw2.ThreeCushion has the wrong return type.", boolean.class, method.getReturnType());
    Assert.assertTrue("The modifiers for method isGameOver() in class hw2.ThreeCushion are not correct. " + getModifierDiff(1025, method.getModifiers()), !(1025 != method.getModifiers() && 1 != method.getModifiers()));
    exceptions = Arrays.asList(method.getExceptionTypes());
    outlawedExceptions = Arrays.asList(new Class[0]);
    for (Class<?> exception : exceptions)
      Assert.assertFalse("The specification requires method isGameOver() in class hw2.ThreeCushion to handle and not throw " + exception.getName() + ".", outlawedExceptions.contains(exception)); 
    LinkedList<Method> methods = new LinkedList<>();
    byte b3;
    int k;
    Method[] arrayOfMethod;
    for (k = (arrayOfMethod = Class.forName("hw2.ThreeCushion").getDeclaredMethods()).length, b3 = 0; b3 < k; ) {
      Method m = arrayOfMethod[b3];
      methods.add(m);
      b3++;
    } 
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("toString", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isBreakShot", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isShotStarted", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isInningStarted", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueBallStrike", new Class[] { BallType.class });
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("lagWinnerChooses", new Class[] { boolean.class, BallType.class });
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueStickStrike", new Class[] { BallType.class });
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("cueBallImpactCushion", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getPlayerAScore", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getPlayerBScore", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getInningPlayer", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("foul", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("endShot", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getInning", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("getCueBall", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isBankShot", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    try {
      method = Class.forName("hw2.ThreeCushion").getDeclaredMethod("isGameOver", new Class[0]);
      methods.remove(method);
    } catch (NoSuchMethodException noSuchMethodException) {}
    for (Method m : methods) {
      if (!m.isBridge() && !m.isSynthetic() && !Modifier.isPrivate(m.getModifiers()) && !Modifier.isProtected(m.getModifiers()) && !m.getName().equals("main"))
        Assert.fail(String.format("Method hw2.ThreeCushion.%1$s(%2$s) is not in the specification. Any methods you add should be private (or possibly protected).", new Object[] { m.getName(), getTypesList(m.getParameterTypes()).replaceAll(".class", "") })); 
    } 
  }
}